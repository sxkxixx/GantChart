{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\molot\\\\Desktop\\\\NewPP2023\\\\GantChart\\\\GantFrontend\\\\app\\\\src\\\\Components\\\\Gantt\\\\Gantt.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './Gantt.css';\nimport { gantt } from 'dhtmlx-gantt';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\nimport s from \"../Main/Main.module.css\";\nimport CustomForm from \"./GanttLightBox/CustomForm\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet toggle = false;\nlet count;\nlet taskId = null;\nexport default class Gantt extends Component {\n  constructor(props) {\n    super(props);\n    this.createTask = task => {\n      axios.post('/api/v1/gant/task/create', task).then(response => {\n        console.log('Task created:', response.data);\n        gantt.addTask(task);\n        gantt.hideLightbox();\n      }).catch(error => {\n        console.error('Failed to create task:', error);\n      });\n    };\n    this.state = {\n      data: []\n    };\n  }\n  componentDidMount() {\n    gantt.config.date_format = \"%Y-%m-%d\";\n    gantt.i18n.setLocale(\"ru\");\n    gantt.config.scales = [{\n      unit: \"month\",\n      step: 1,\n      format: \"%F, %Y\"\n    }, {\n      unit: \"day\",\n      step: 1,\n      format: \"%j\"\n    }];\n    gantt.config.scale_height = 80;\n    gantt.init(this.ganttContainer);\n    gantt.config.columns = [{\n      name: \"text\",\n      label: \"ЗАДАЧИ\",\n      width: \"*\",\n      tree: true\n    }, {\n      name: \"checked\",\n      label: \"\",\n      width: \"20\",\n      template: function (task) {\n        if (task.children === 0) {\n          return \"<input type='checkbox' name='test' id='test' checked={task.is_on_kanban} value='1'>\";\n        }\n      }\n    }, {\n      name: \"add\",\n      label: \"\",\n      width: 44,\n      template: function (task) {\n        return \"<div onclick='custom_add2(\" + task.id + \")';>&nbsp;&nbsp;&nbsp;+&nbsp;&nbsp;</div>\";\n      }\n    }];\n\n    // gantt.attachEvent(\"onBeforeLightbox\", function(id) {\n    //     count = 1;\n    //     gantt.callEvent(\"onLightbox\", [id]);\n    //     taskId = id;\n    //     let task = gantt.getTask(id);\n    //\n    //     let form = getForm();\n    //     let input = form.querySelector(\"[name='description']\");\n    //     console.log(document.getElementsByName(\"description\")[0]);\n    //     console.log(input.value)\n    //     input.focus();\n    //     input.value = task.text;\n    //\n    //     // Adding values to date fields\n    //     let start_date = form.querySelector(\"[name='start_date']\");\n    //     start_date.value = gantt.date.date_to_str(\"%d-%m-%Y %H:%i\")(task.start_date);\n    //     let duration = form.querySelector(\"[name='duration']\");\n    //     duration.value = task.duration;\n    //     form.style.display = \"block\";\n    //\n    //     form.querySelector(\"[name='save']\").onclick = save;\n    //     form.querySelector(\"[name='close']\").onclick = cancel;\n    //     form.querySelector(\"[name='delete']\").onclick = remove;\n    //\n    // });\n\n    gantt.attachEvent(\"onBeforeLightbox\", function (id) {\n      count = 1;\n      gantt.callEvent(\"onLightbox\", [id]);\n      taskId = id;\n      let task = gantt.getTask(id);\n\n      // create an object with the necessary task data\n      let formData = {\n        title: \"Название задачи родителя\",\n        // replace with actual parent task title\n        project: \"что-то\",\n        // replace with actual project name\n        deadline1: gantt.date.date_to_str(\"%d-%m-%Y %H:%i\")(task.deadline1),\n        deadline2: gantt.date.date_to_str(\"%d-%m-%Y %H:%i\")(task.deadline2),\n        date: gantt.date.date_to_str(\"%d-%m-%Y %H:%i\")(task.date),\n        description: task.text,\n        performer1: \"Иванов Иван Иванович\",\n        // replace with actual performer name\n        performer2: \"\",\n        // add more performers if necessary\n        checkList: [false, false] // initialize the checklist with unchecked items\n      };\n\n      // pass the formData object as a prop to the CustomForm component\n      ReactDOM.render( /*#__PURE__*/_jsxDEV(CustomForm, {\n        task: formData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }, this), document.getElementById(\"my_form\"));\n      return false; // prevent the default lightbox from opening\n    });\n\n    gantt.hideLightbox = function () {\n      getForm().style.display = \"none\";\n      taskId = null;\n    };\n    function plusOne() {\n      let form = getForm();\n      let duration = form.querySelector(\"[name='duration']\");\n      count++;\n      duration.value = count;\n    }\n\n    // Choosing which lightbox will be displayed\n    function getForm() {\n      if (!toggle) return document.getElementById(\"lightbox1\");\n      if (toggle) return document.getElementById(\"lightbox2\");\n    }\n    ;\n    function save() {\n      let task = gantt.getTask(taskId);\n      task.text = getForm().querySelector(\"[name='description']\").value;\n      // Applying dates in save function\n      task.start_date = gantt.date.str_to_date(\"%d-%m-%Y %H:%i\")(getForm().querySelector(\"[name='start_date']\").value);\n      task.end_date = gantt.date.add(new Date(task.start_date), count, 'day');\n      if (task.$new) {\n        gantt.addTask(task, task.parent);\n      } else {\n        gantt.updateTask(task.id);\n      }\n      gantt.hideLightbox();\n    }\n    function cancel() {\n      let task = gantt.getTask(taskId);\n      if (task.$new) gantt.deleteTask(task.id);\n      gantt.hideLightbox();\n    }\n    function remove() {\n      gantt.deleteTask(taskId);\n      gantt.hideLightbox();\n    }\n    gantt.config.open_tree_initially = true;\n    gantt.templates.grid_file = function (obj) {\n      if (obj.$level === 0) return \"<div class='gantt_tree_icon gantt_first'><i class='fas fa-plus'></i></div>\";else return \"<div class='gantt_tree_icon'></div>\";\n    };\n    gantt.templates.grid_file = function (item) {\n      return \"<div class='gantt_tree_icon gantt_file' style='display: none'></div>\";\n    };\n    gantt.templates.grid_folder = function (item) {\n      return `<div \n   class='gantt_tree_icon gantt_folder_${item.$open ? \"open\" : \"closed\"}' style='display: none'>\n   </div>`;\n    };\n    gantt.templates.task_text = function (start, end, task) {\n      if (task.text) {\n        return '';\n      }\n    };\n    gantt.templates.task_class = function (start, end, task) {\n      if (task.$level === 0 || task.$level === 1) {\n        return \"parent-task\";\n      } else {\n        return \"child-task\";\n      }\n    };\n    axios.get('http://localhost:8000/api/v1/gant/tasks').then(response => {\n      const transformedData = this.transformData(response.data);\n      gantt.parse(transformedData);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  transformData(data) {\n    const taskMap = new Map();\n    function transformTask(task) {\n      let parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const taskId = task.id;\n      taskMap.set(taskId, {\n        id: taskId,\n        text: task.name,\n        description: task.description,\n        is_on_kanban: task.is_on_kanban,\n        is_completed: task.is_completed,\n        start_date: task.planned_start_date,\n        end_date: task.planned_finish_date,\n        deadline: task.deadline,\n        open: true,\n        parent: parentId,\n        children: task.children.length\n      });\n      if (task.children) {\n        task.children.forEach(child => {\n          transformTask(child, taskId);\n        });\n      }\n    }\n    data.forEach(task => {\n      transformTask(task);\n    });\n    const transformedData = {\n      data: Array.from(taskMap.values())\n    };\n    return transformedData;\n  }\n  custom_add1(id) {\n    gantt.hideLightbox();\n    toggle = false;\n    let new_id = +new Date();\n    gantt.createTask({\n      id: new_id,\n      start_date: gantt.getState().min_date,\n      duration: 1\n    }, id, 1);\n  }\n  custom_add2(id) {\n    gantt.hideLightbox();\n    toggle = true;\n    let new_id = +new Date();\n    gantt.createTask({\n      id: new_id,\n      start_date: gantt.getState().min_date,\n      duration: 1\n    }, id, 1);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.elements,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.dropdown,\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"tasks\",\n            id: \"tasks\",\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"\\u041C\\u043E\\u0438 \\u0417\\u0430\\u0434\\u0430\\u0447\\u0438\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"projects\",\n            id: \"projects\",\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442 123\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"teams\",\n            id: \"teams\",\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"\\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.button,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => gantt.createTask(this.createTask),\n            children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0417\\u0430\\u0434\\u0430\\u0447\\u0443\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: input => {\n          this.ganttContainer = input;\n        },\n        style: {\n          width: '90%',\n          height: '85%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}","map":{"version":3,"names":["React","Component","axios","gantt","s","CustomForm","ReactDOM","jsxDEV","_jsxDEV","Fragment","_Fragment","toggle","count","taskId","Gantt","constructor","props","createTask","task","post","then","response","console","log","data","addTask","hideLightbox","catch","error","state","componentDidMount","config","date_format","i18n","setLocale","scales","unit","step","format","scale_height","init","ganttContainer","columns","name","label","width","tree","template","children","id","attachEvent","callEvent","getTask","formData","title","project","deadline1","date","date_to_str","deadline2","description","text","performer1","performer2","checkList","render","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","getForm","style","display","plusOne","form","duration","querySelector","value","save","start_date","str_to_date","end_date","add","Date","$new","parent","updateTask","cancel","deleteTask","remove","open_tree_initially","templates","grid_file","obj","$level","item","grid_folder","$open","task_text","start","end","task_class","get","transformedData","transformData","parse","taskMap","Map","transformTask","parentId","arguments","length","undefined","set","is_on_kanban","is_completed","planned_start_date","planned_finish_date","deadline","open","forEach","child","Array","from","values","custom_add1","new_id","getState","min_date","custom_add2","className","elements","dropdown","button","onClick","ref","input","height"],"sources":["C:/Users/molot/Desktop/NewPP2023/GantChart/GantFrontend/app/src/Components/Gantt/Gantt.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './Gantt.css'\r\nimport {gantt} from 'dhtmlx-gantt';\r\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\r\nimport s from \"../Main/Main.module.css\";\r\nimport CustomForm from \"./GanttLightBox/CustomForm\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nlet toggle = false;\r\nlet count;\r\nlet taskId = null;\r\n\r\nexport default class Gantt extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        gantt.config.date_format = \"%Y-%m-%d\";\r\n\r\n        gantt.i18n.setLocale(\"ru\");\r\n\r\n        gantt.config.scales = [\r\n            {unit: \"month\", step: 1, format: \"%F, %Y\"},\r\n            {unit: \"day\", step: 1, format: \"%j\"}\r\n        ];\r\n\r\n        gantt.config.scale_height = 80;\r\n\r\n        gantt.init(this.ganttContainer);\r\n\r\n        gantt.config.columns = [\r\n            {name: \"text\", label: \"ЗАДАЧИ\", width: \"*\", tree: true},\r\n            {name:\"checked\", label:\"\",width: \"20\", template:function(task) {\r\n                    if (task.children === 0) {\r\n                        return \"<input type='checkbox' name='test' id='test' checked={task.is_on_kanban} value='1'>\";\r\n                    }\r\n                }\r\n            },\r\n            {name:\"add\", label:\"\", width:44, template: function (task){\r\n                    return \"<div onclick='custom_add2(\"+task.id+\")';>&nbsp;&nbsp;&nbsp;+&nbsp;&nbsp;</div>\"} }\r\n        ];\r\n\r\n        // gantt.attachEvent(\"onBeforeLightbox\", function(id) {\r\n        //     count = 1;\r\n        //     gantt.callEvent(\"onLightbox\", [id]);\r\n        //     taskId = id;\r\n        //     let task = gantt.getTask(id);\r\n        //\r\n        //     let form = getForm();\r\n        //     let input = form.querySelector(\"[name='description']\");\r\n        //     console.log(document.getElementsByName(\"description\")[0]);\r\n        //     console.log(input.value)\r\n        //     input.focus();\r\n        //     input.value = task.text;\r\n        //\r\n        //     // Adding values to date fields\r\n        //     let start_date = form.querySelector(\"[name='start_date']\");\r\n        //     start_date.value = gantt.date.date_to_str(\"%d-%m-%Y %H:%i\")(task.start_date);\r\n        //     let duration = form.querySelector(\"[name='duration']\");\r\n        //     duration.value = task.duration;\r\n        //     form.style.display = \"block\";\r\n        //\r\n        //     form.querySelector(\"[name='save']\").onclick = save;\r\n        //     form.querySelector(\"[name='close']\").onclick = cancel;\r\n        //     form.querySelector(\"[name='delete']\").onclick = remove;\r\n        //\r\n        // });\r\n\r\n        gantt.attachEvent(\"onBeforeLightbox\", function(id) {\r\n            count = 1;\r\n            gantt.callEvent(\"onLightbox\", [id]);\r\n            taskId = id;\r\n            let task = gantt.getTask(id);\r\n\r\n            // create an object with the necessary task data\r\n            let formData = {\r\n                title: \"Название задачи родителя\", // replace with actual parent task title\r\n                project: \"что-то\", // replace with actual project name\r\n                deadline1: gantt.date.date_to_str(\"%d-%m-%Y %H:%i\")(task.deadline1),\r\n                deadline2: gantt.date.date_to_str(\"%d-%m-%Y %H:%i\")(task.deadline2),\r\n                date: gantt.date.date_to_str(\"%d-%m-%Y %H:%i\")(task.date),\r\n                description: task.text,\r\n                performer1: \"Иванов Иван Иванович\", // replace with actual performer name\r\n                performer2: \"\", // add more performers if necessary\r\n                checkList: [false, false] // initialize the checklist with unchecked items\r\n            };\r\n\r\n            // pass the formData object as a prop to the CustomForm component\r\n            ReactDOM.render(<CustomForm task={formData} />, document.getElementById(\"my_form\"));\r\n\r\n            return false; // prevent the default lightbox from opening\r\n        });\r\n\r\n        gantt.hideLightbox = function(){\r\n            getForm().style.display = \"none\";\r\n            taskId = null;\r\n        }\r\n\r\n\r\n        function plusOne(){\r\n            let form = getForm();\r\n            let duration = form.querySelector(\"[name='duration']\");\r\n            count++;\r\n            duration.value = count;\r\n        }\r\n\r\n// Choosing which lightbox will be displayed\r\n        function getForm() {\r\n            if(!toggle)\r\n                return document.getElementById(\"lightbox1\");\r\n            if (toggle)\r\n                return document.getElementById(\"lightbox2\");\r\n        };\r\n\r\n\r\n        function save() {\r\n            let task = gantt.getTask(taskId);\r\n            task.text = getForm().querySelector(\"[name='description']\").value;\r\n            // Applying dates in save function\r\n            task.start_date = gantt.date.str_to_date(\"%d-%m-%Y %H:%i\")(getForm().querySelector(\"[name='start_date']\").value);\r\n            task.end_date = gantt.date.add(new Date(task.start_date), count, 'day');\r\n\r\n\r\n\r\n            if(task.$new){\r\n                gantt.addTask(task,task.parent);\r\n            }else{\r\n                gantt.updateTask(task.id);\r\n\r\n            }\r\n\r\n            gantt.hideLightbox();\r\n        }\r\n\r\n        function cancel() {\r\n            let task = gantt.getTask(taskId);\r\n\r\n            if(task.$new)\r\n                gantt.deleteTask(task.id);\r\n            gantt.hideLightbox();\r\n        }\r\n\r\n        function remove() {\r\n            gantt.deleteTask(taskId);\r\n            gantt.hideLightbox();\r\n        }\r\n\r\n\r\n        gantt.config.open_tree_initially = true;\r\n\r\n        gantt.templates.grid_file = function(obj){\r\n            if(obj.$level === 0)\r\n                return \"<div class='gantt_tree_icon gantt_first'><i class='fas fa-plus'></i></div>\";\r\n            else\r\n                return \"<div class='gantt_tree_icon'></div>\";\r\n        };\r\n\r\n        gantt.templates.grid_file = function (item) {\r\n            return \"<div class='gantt_tree_icon gantt_file' style='display: none'></div>\";\r\n        };\r\n\r\n        gantt.templates.grid_folder = function (item) {\r\n            return `<div \r\n   class='gantt_tree_icon gantt_folder_${(item.$open ? \"open\" : \"closed\")}' style='display: none'>\r\n   </div>`;\r\n        };\r\n\r\n        gantt.templates.task_text=function(start, end, task){\r\n            if (task.text){\r\n             return ''\r\n            }\r\n        };\r\n\r\n        gantt.templates.task_class = function (start, end, task) {\r\n            if (task.$level === 0 || task.$level === 1 ) {\r\n                return \"parent-task\";\r\n            } else {\r\n                return \"child-task\";\r\n            }\r\n        }\r\n\r\n        axios.get('http://localhost:8000/api/v1/gant/tasks')\r\n            .then(response => {\r\n                const transformedData = this.transformData(response.data);\r\n                gantt.parse(transformedData);\r\n\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    createTask = (task) => {\r\n        axios.post('/api/v1/gant/task/create', task)\r\n            .then(response => {\r\n                console.log('Task created:', response.data);\r\n                gantt.addTask(task);\r\n                gantt.hideLightbox();\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to create task:', error);\r\n            });\r\n    };\r\n    transformData(data) {\r\n        const taskMap = new Map();\r\n\r\n        function transformTask(task, parentId = 0) {\r\n            const taskId = task.id;\r\n\r\n            taskMap.set(taskId, {\r\n                id: taskId,\r\n                text: task.name,\r\n                description: task.description,\r\n                is_on_kanban: task.is_on_kanban,\r\n                is_completed: task.is_completed,\r\n                start_date: task.planned_start_date,\r\n                end_date: task.planned_finish_date,\r\n                deadline: task.deadline,\r\n                open: true,\r\n                parent: parentId,\r\n                children: task.children.length\r\n            });\r\n\r\n            if (task.children) {\r\n                task.children.forEach((child) => {\r\n                    transformTask(child, taskId);\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        data.forEach((task) => {\r\n            transformTask(task);\r\n        });\r\n\r\n        const transformedData = {\r\n            data: Array.from(taskMap.values()),\r\n        };\r\n\r\n        return transformedData;\r\n    };\r\n\r\n\r\n    custom_add1(id){\r\n        gantt.hideLightbox();\r\n        toggle = false;\r\n        let new_id = +new Date()\r\n        gantt.createTask({id: new_id, start_date:gantt.getState().min_date, duration: 1},id,1);\r\n    }\r\n\r\n    custom_add2(id){\r\n        gantt.hideLightbox();\r\n        toggle = true;\r\n        let new_id = +new Date()\r\n        gantt.createTask({id: new_id, start_date:gantt.getState().min_date, duration: 1},id,1);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={s.elements}>\r\n                    <div className={s.dropdown}>\r\n                        <select name=\"tasks\" id=\"tasks\">\r\n                            <option>Мои Задачи</option>\r\n                        </select>\r\n                        <select name=\"projects\" id=\"projects\">\r\n                            <option>Проект 123</option>\r\n                        </select>\r\n                        <select name=\"teams\" id=\"teams\">\r\n                            <option>Команда</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className={s.button}>\r\n                        <button onClick={() => gantt.createTask(this.createTask)}>Создать Задачу</button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/*/!* lightbox1 *!/*/}\r\n                {/*<div id=\"lightbox1\" className=\"lightbox1\" style={{ display: 'none' }}>*/}\r\n                {/*    <div className=\"lightbox1elements\">*/}\r\n                {/*        <div className=\"title\">*/}\r\n                {/*            <input type=\"text\" name=\"description\" value=\"\" />*/}\r\n                {/*            <span>Базовая задача: Название задачи родителя</span>*/}\r\n                {/*        </div>*/}\r\n                {/*        /!* Adding dates fields *!/*/}\r\n                {/*        <div className=\"project\">*/}\r\n                {/*            <span>Проект</span>*/}\r\n                {/*            <input type=\"date\"/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"elements\">*/}\r\n                {/*            <div className='element'>*/}\r\n                {/*                <span>Дедлайн</span>*/}\r\n                {/*                <input type=\"date\"/>*/}\r\n                {/*            </div>*/}\r\n                {/*            <div className='element'>*/}\r\n                {/*                <span>Тег команды</span>*/}\r\n                {/*                <span>что-то</span>*/}\r\n                {/*            </div>*/}\r\n                {/*            <div className='date'>*/}\r\n                {/*                <span>Планируемые сроки выполнения</span>*/}\r\n                {/*                <input type=\"date\"/>*/}\r\n                {/*            </div>*/}\r\n                {/*        </div>*/}\r\n                {/*        <label htmlFor=\"start_date\">Start date*/}\r\n                {/*            <input type=\"text\" name=\"start_date\" value=\"\" />*/}\r\n                {/*        </label>*/}\r\n                {/*        <label htmlFor=\"Duration\">*/}\r\n                {/*            Duration*/}\r\n                {/*            <input type=\"text\" name=\"duration\" value=\"0\" />*/}\r\n                {/*            <p className=\"floated-right\">PLUS</p>*/}\r\n                {/*        </label>*/}\r\n                {/*        <input type=\"button\" name=\"save\" value=\"Save\" style={{ width: '100px' }} />*/}\r\n                {/*        <input type=\"button\" name=\"delete\" value=\"Delete\" style={{ width: '100px' }} />*/}\r\n                {/*    </div>*/}\r\n                {/*    <input type=\"button\" name=\"close\" value=\"Close\" style={{ width: '100px' }} />*/}\r\n                {/*</div>*/}\r\n\r\n                {/*/!* lightbox2 *!/*/}\r\n                {/*<div id=\"lightbox2\" className=\"lightbox2\" style={{ display: 'none' }}>*/}\r\n                {/*    <label htmlFor=\"description\">Task text </label>*/}\r\n                {/*    <input type=\"text\" name=\"description\" value=\"\" />*/}\r\n                {/*    <br />*/}\r\n                {/*    <label htmlFor=\"start_date\">Start date*/}\r\n                {/*        <input type=\"text\" name=\"start_date\" value=\"\" />*/}\r\n                {/*    </label>*/}\r\n                {/*    <label htmlFor=\"Duration\">*/}\r\n                {/*        Duration*/}\r\n                {/*        <input type=\"text\" name=\"duration\" value=\"0\" />*/}\r\n                {/*        <p className=\"floated-right\">-</p>*/}\r\n                {/*    </label>*/}\r\n                {/*    <br />*/}\r\n                {/*    <input type=\"button\" name=\"save\" value=\"Save\" style={{ width: '100px' }} />*/}\r\n                {/*    <input type=\"button\" name=\"close\" value=\"Close\" style={{ width: '100px' }} />*/}\r\n                {/*    <input type=\"button\" name=\"delete\" value=\"Delete\" style={{ width: '100px' }} />*/}\r\n                {/*</div>*/}\r\n\r\n                <div\r\n                    ref={(input) => {\r\n                        this.ganttContainer = input\r\n                    }}\r\n                    style={{width: '90%', height: '85%'}}\r\n                ></div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}