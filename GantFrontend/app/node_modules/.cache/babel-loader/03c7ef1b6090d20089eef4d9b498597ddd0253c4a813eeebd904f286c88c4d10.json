{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\molot\\\\Desktop\\\\NewPP2023\\\\GantChart\\\\GantFrontend\\\\app\\\\src\\\\Components\\\\Gantt\\\\Gantt.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './Gantt.css';\nimport { gantt } from 'dhtmlx-gantt';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Gantt extends Component {\n  constructor(props) {\n    super(props);\n    this.handleTaskUpdated = (taskId, task) => {\n      axios.post(`http://localhost:8000/api/v1/gant/task/${taskId}/edit_dates`, {\n        planned_start_date: task.start_date,\n        planned_finish_date: task.end_date\n      }).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.error(error);\n      });\n    };\n    this.state = {\n      data: []\n    };\n  }\n  componentDidMount() {\n    gantt.config.date_format = \"%Y-%m-%d %H:%i\";\n    gantt.config.scales = [{\n      unit: \"month\",\n      step: 1,\n      format: \"%F, %Y\"\n    }, {\n      unit: \"day\",\n      step: 1,\n      format: \"%j, %D\"\n    }];\n    gantt.config.scale_height = 80;\n    gantt.init(this.ganttContainer);\n    gantt.config.columns = [{\n      name: \"text\",\n      label: \"ЗАДАЧИ\",\n      width: \"*\",\n      tree: true\n    }, {\n      name: \"checked\",\n      label: \"\",\n      width: \"20\",\n      template: function (task) {\n        if (task.children === 0) {\n          return \"<input type='checkbox' name='test' id='test' checked={task.checked} value='1'>\";\n        }\n      }\n    }, {\n      name: \"add\",\n      label: \"\",\n      width: \"44\"\n    }];\n    gantt.config.lightbox.sections = [{\n      name: \"text\",\n      height: 22,\n      map_to: \"text\",\n      type: \"textarea\",\n      focus: true\n    }, {\n      name: \"description\",\n      height: 70,\n      map_to: \"description\",\n      type: \"textarea\"\n    }, {\n      name: \"time\",\n      height: 72,\n      type: \"time\",\n      map_to: \"auto\"\n    }];\n    gantt.templates.grid_file = function (obj) {\n      if (obj.$level === 0) return \"<div class='gantt_tree_icon gantt_first'><i class='fas fa-plus'></i></div>\";else return \"<div class='gantt_tree_icon'></div>\";\n    };\n    gantt.templates.grid_file = function (item) {\n      return \"<div class='gantt_tree_icon gantt_file' style='display: none'></div>\";\n    };\n    gantt.templates.grid_folder = function (item) {\n      return `<div \n   class='gantt_tree_icon gantt_folder_${item.$open ? \"open\" : \"closed\"}' style='display: none'>\n   </div>`;\n    };\n    gantt.templates.task_text = function (start, end, task) {\n      if (task.text) {\n        return '';\n      }\n    };\n    gantt.templates.task_class = function (start, end, task) {\n      if (task.$level === 0 || task.$level === 1) {\n        return \"parent-task\";\n      } else {\n        return \"child-task\";\n      }\n    };\n    gantt.templates.grid_open = function (item) {\n      return \"<div class='gantt_tree_icon gantt_\" + (item.$open ? \"close\" : \"open\") + \"'></div>\";\n    };\n    axios.get('http://localhost:8000/api/v1/gant/tasks').then(response => {\n      const transformedData = this.transformData(response.data);\n      gantt.parse(transformedData);\n    }).catch(error => {\n      console.error(error);\n    });\n    gantt.attachEvent(\"onAfterTaskDrag\", (id, mode, task) => {\n      this.handleTaskUpdated(id, task);\n    });\n    gantt.attachEvent(\"onLightboxSave\", (id, task, is_new) => {\n      this.editTaskDates(id, task.start_date, task.end_date);\n    });\n  }\n  transformData(data) {\n    const taskMap = new Map();\n    function transformTask(task) {\n      let parentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      const taskId = task.id;\n      taskMap.set(taskId, {\n        id: taskId,\n        text: task.name,\n        start_date: task.planned_start_date,\n        end_date: task.planned_finish_date,\n        progress: 0,\n        open: true,\n        parent: parentId,\n        description: task.description,\n        checked: task.is_on_kanban,\n        children: task.children.length\n      });\n      if (task.children) {\n        task.children.forEach(child => {\n          transformTask(child, taskId);\n        });\n      }\n    }\n    data.forEach(task => {\n      transformTask(task);\n    });\n    const transformedData = {\n      data: Array.from(taskMap.values())\n    };\n    return transformedData;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: input => {\n        this.ganttContainer = input;\n      },\n      style: {\n        width: '90%',\n        height: '90%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","axios","gantt","jsxDEV","_jsxDEV","Gantt","constructor","props","handleTaskUpdated","taskId","task","post","planned_start_date","start_date","planned_finish_date","end_date","then","response","console","log","catch","error","state","data","componentDidMount","config","date_format","scales","unit","step","format","scale_height","init","ganttContainer","columns","name","label","width","tree","template","children","lightbox","sections","height","map_to","type","focus","templates","grid_file","obj","$level","item","grid_folder","$open","task_text","start","end","text","task_class","grid_open","get","transformedData","transformData","parse","attachEvent","id","mode","is_new","editTaskDates","taskMap","Map","transformTask","parentId","arguments","length","undefined","set","progress","open","parent","description","checked","is_on_kanban","forEach","child","Array","from","values","render","ref","input","style","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/molot/Desktop/NewPP2023/GantChart/GantFrontend/app/src/Components/Gantt/Gantt.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './Gantt.css'\r\nimport {gantt} from 'dhtmlx-gantt';\r\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\r\n\r\n\r\nexport default class Gantt extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: []\r\n        };\r\n    }\r\n    handleTaskUpdated = (taskId, task) => {\r\n        axios.post(`http://localhost:8000/api/v1/gant/task/${taskId}/edit_dates`, {\r\n            planned_start_date: task.start_date,\r\n            planned_finish_date: task.end_date\r\n        })\r\n            .then(response => {\r\n                console.log(response);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        gantt.config.date_format = \"%Y-%m-%d %H:%i\";\r\n\r\n        gantt.config.scales = [\r\n            {unit: \"month\", step: 1, format: \"%F, %Y\"},\r\n            {unit: \"day\", step: 1, format: \"%j, %D\"}\r\n        ];\r\n\r\n        gantt.config.scale_height = 80;\r\n\r\n        gantt.init(this.ganttContainer);\r\n\r\n\r\n        gantt.config.columns = [\r\n            {name: \"text\", label: \"ЗАДАЧИ\", width: \"*\", tree: true},\r\n            {name:\"checked\", label:\"\",width: \"20\", template:function(task) {\r\n                    if (task.children === 0) {\r\n                        return \"<input type='checkbox' name='test' id='test' checked={task.checked} value='1'>\";\r\n                    }\r\n                }\r\n            },\r\n            {name: \"add\", label: \"\", width: \"44\"},\r\n        ];\r\n\r\n        gantt.config.lightbox.sections = [\r\n            {name: \"text\", height: 22, map_to: \"text\", type: \"textarea\", focus: true},\r\n            {name: \"description\", height: 70, map_to: \"description\", type: \"textarea\"},\r\n            {name: \"time\", height: 72, type: \"time\", map_to: \"auto\"},\r\n        ];\r\n\r\n        gantt.templates.grid_file = function(obj){\r\n            if(obj.$level === 0)\r\n                return \"<div class='gantt_tree_icon gantt_first'><i class='fas fa-plus'></i></div>\";\r\n            else\r\n                return \"<div class='gantt_tree_icon'></div>\";\r\n        };\r\n\r\n        gantt.templates.grid_file = function (item) {\r\n            return \"<div class='gantt_tree_icon gantt_file' style='display: none'></div>\";\r\n        };\r\n\r\n        gantt.templates.grid_folder = function (item) {\r\n            return `<div \r\n   class='gantt_tree_icon gantt_folder_${(item.$open ? \"open\" : \"closed\")}' style='display: none'>\r\n   </div>`;\r\n        };\r\n\r\n        gantt.templates.task_text=function(start, end, task){\r\n            if (task.text){\r\n             return ''\r\n            }\r\n        };\r\n\r\n        gantt.templates.task_class = function (start, end, task) {\r\n            if (task.$level === 0 || task.$level === 1 ) {\r\n                return \"parent-task\";\r\n            } else {\r\n                return \"child-task\";\r\n            }\r\n        }\r\n\r\n        gantt.templates.grid_open = function(item) {\r\n            return \"<div class='gantt_tree_icon gantt_\" +\r\n                (item.$open ? \"close\" : \"open\") + \"'></div>\";\r\n        };\r\n\r\n\r\n        axios.get('http://localhost:8000/api/v1/gant/tasks')\r\n            .then(response => {\r\n                const transformedData = this.transformData(response.data);\r\n                gantt.parse(transformedData);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n\r\n\r\n        gantt.attachEvent(\"onAfterTaskDrag\", (id, mode, task) => {\r\n            this.handleTaskUpdated(id, task);\r\n        });\r\n\r\n        gantt.attachEvent(\"onLightboxSave\", (id, task, is_new) => {\r\n            this.editTaskDates(id, task.start_date, task.end_date);\r\n        });\r\n    }\r\n\r\n\r\n    transformData(data) {\r\n        const taskMap = new Map();\r\n\r\n        function transformTask(task, parentId = 0) {\r\n            const taskId = task.id;\r\n\r\n            taskMap.set(taskId, {\r\n                id: taskId,\r\n                text: task.name,\r\n                start_date: task.planned_start_date,\r\n                end_date: task.planned_finish_date,\r\n                progress: 0,\r\n                open: true,\r\n                parent: parentId,\r\n                description: task.description,\r\n                checked: task.is_on_kanban,\r\n                children: task.children.length\r\n            });\r\n\r\n            if (task.children) {\r\n                task.children.forEach((child) => {\r\n                    transformTask(child, taskId);\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        data.forEach((task) => {\r\n            transformTask(task);\r\n        });\r\n\r\n        const transformedData = {\r\n            data: Array.from(taskMap.values()),\r\n        };\r\n\r\n        return transformedData;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={(input) => {\r\n                    this.ganttContainer = input\r\n                }}\r\n                style={{width: '90%', height: '90%'}}\r\n            ></div>\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}